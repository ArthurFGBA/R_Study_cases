sprintf('Fumantes - Media: %s, limite inferior: %s, limite superior: %s', mf, mf_inf, mf_sup )
sprintf('Não fumantes - Media: %s, limite inferior: %s, limite superior: %s', mnf, mnf_inf, mnf_sup )
sprintf('Valor presente com taxa de desconto de 12% a.a.: %s.', vp_12)
sprintf('Valor presente com taxa de desconto de 12% a.a.: %s', vp_12)
sprintf('Valor presente com taxa de desconto de 12% a.a.: %s', vp_12)
##Questão 05
#parte 1
val_p<- function (c,j) {
val<-0
n<- length(ent)
for(t in 1:n) {
val<-val+c[t]/(1+j)^t
}
return(val)
}
ent<-c(100,200,300,400,500,600)
vp_12<-val_p(ent,0.12)
sprintf('Valor presente com taxa de desconto de 12% a.a.: %s', vp_12)
sprintf('Valor presente com taxa de desconto de 12%s a.a.: %s', vp_12)
sprintf('Valor presente com taxa de desconto de 12 a.a.: %s', vp_12)
sprintf('Valor presente com taxa de desconto de 12"%" a.a.: %s', vp_12)
sprintf('Valor presente com taxa de desconto de 12%n a.a.: %s', vp_12)
sprintf('Valor presente com taxa de desconto de 12%a a.a.: %s', vp_12)
sprintf('Valor presente com taxa de desconto de 12%s a.a.: %s', vp_12)
sprintf('Valor presente com taxa de desconto de 0.12 a.a.: %s', vp_12)
sprintf('Valor presente com taxa de desconto de 0.12 a.a.: %s', round(vp_12,2))
#parte 2
val_p(ent,c(0.04,0.05,0.06))
#Intervalo de confiança
#fumantes
sprintf('Fumantes - Media: %s, limite inferior: %s, limite superior: %s', mf, mf_inf, mf_sup )
sprintf('Não fumantes - Media: %s, limite inferior: %s, limite superior: %s', mnf, mnf_inf, mnf_sup )
IC_mnf<-c(round((mnf+t2*s2/sqrt(n2)),2), round((mnf-t2*s2/sqrt(n2)),2))
IC_mnf<-c(round((mnf-t2*s2/sqrt(n2)),2), round((mnf+t2*s2/sqrt(n2)),2))
sprintf('Não fumantes - Media: %s, com intervalo de confiança:[%s]', mnf, IC_mnf )
sprintf('Não fumantes - Media: %s, com intervalo de confiança:[%s, %s]', mnf, IC_mnf )
sprintf('Não fumantes - Media: %s, limite inferior: %s, limite superior: %s', mnf, mnf_inf, mnf_sup )
sign <- ifelse((2 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((3 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((4 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((5 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((6 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((7 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((8 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((9 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((10 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((11 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((12 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((13 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((14 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((15 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((16 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((17 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((18 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((19 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((20 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((21 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((22 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((23 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((24 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((23 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((24 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((25 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((26 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((27 - 2) %% 4 < 2, -1, 1)
sign <- ifelse((28 - 2) %% 4 < 2, -1, 1)
##Questão 06
x<-5
sum<-x
for (n in 2:1000) {
sign <- ifelse((n - 2) %% 4 < 2, -1, 1)
sum<-sum+(sign*(x^n)/(n*factorial(n)))
}
for (n in 2:1000) {
sign <- ifelse((n - 2) %% 4 < 2, -1, 1)
term<-(sign*(x^n)/(n*factorial(n)))
sum<-sum+term
}
sign <- ifelse((1000 - 2) %% 4 < 2, -1, 1)
term<-(sign*(x^1000)/(1000*factorial(1000)))
print(sum)
4%%4
2%%4
(2-2)%%4
(4-2)%%4
(5-2)%%4
(6-2)%%4
(7-2)%%4
(8-2)%%4
(9-2)%%4
(10-2)%%4
(11-2)%%4
(1000-2)%%4
(999-2)%%4
(998-2)%%4
(997-2)%%4
(996-2)%%4
(995-2)%%4
(994-2)%%4
(993-2)%%4
(992-2)%%4
(991-2)%%4
(990-2)%%4
(989-2)%%4
sign <- ifelse((n - 2) %% 4 < 2, -1, 1)
term<-(sign*(x^n)/(n*factorial(n)))
sum<-sum+term
##Questão 06
x<-5
sum<-x
for (n in 2:1000) {
sign <- ifelse((n - 2) %% 4 < 2, -1, 1)
term<-(sign*(x^n)/(n*factorial(n)))
sum<-sum+term
}
for (n in 2:1000) {
# Alternar o sinal de acordo com o padrão - - + + a partir de n = 2
sign <- ifelse((n - 2) %% 4 < 2, -1, 1)
# Verificar se o termo é finito antes de adicionar à soma
if (is.finite(term)) {
sum <- sum + term
} else {
warning(paste("Termo não finito encontrado em n =", n))
break
}
}
##Questão 06
x<-5
sum<-x
for (n in 2:1000) {
# Alternar o sinal de acordo com o padrão - - + + a partir de n = 2
sign <- ifelse((n - 2) %% 4 < 2, -1, 1)
# Verificar se o termo é finito antes de adicionar à soma
if (is.finite(term)) {
sum <- sum + term
} else {
warning(paste("Termo não finito encontrado em n =", n))
break
}
}
for (n in 2:1000) {
# Alternar o sinal de acordo com o padrão - - + + a partir de n = 2
sign <- ifelse((n - 2) %% 4 < 2, -1, 1)
term<-(sign*(x^n)/(n*factorial(n)))
# Verificar se o termo é finito antes de adicionar à soma
if (is.finite(term)) {
sum <- sum + term
} else {
warning(paste("Termo não finito encontrado em n =", n))
break
}
}
sign <- ifelse((441 - 2) %% 4 < 2, -1, 1)
term<-(sign*(x^441)/(441*factorial(441)))
##Questão 06
x<-5
term<-(sign*(x^441)/(441*factorial(441)))
sign <- ifelse((442 - 2) %% 4 < 2, -1, 1)
term<-(sign*(x^442)/(442*factorial(442)))
##Questão 06
x<-5
sum<-x
for (n in 2:1000) {
# Alternar o sinal de acordo com o padrão - - + + a partir de n = 2
sign <- ifelse((n - 2) %% 4 < 2, -1, 1)
term<-(sign*(x^n)/(n*factorial(n)))
# Verificar se o termo é finito antes de adicionar à soma
if (is.finite(term)) {
sum <- sum + term
} else {
warning(paste("Termo não finito encontrado em n =", n))
break
}
}
dados<-read_xlsx("~/MeusProjetos/R_Study_cases/UFPE/Math. Laboratory/Importar Arquivo Excel.xlsx")
library(xlsx)
dados<-read_xlsx("~/MeusProjetos/R_Study_cases/UFPE/Math. Laboratory/Importar Arquivo Excel.xlsx")
dados<-read.xlsx("~/MeusProjetos/R_Study_cases/UFPE/Math. Laboratory/Importar Arquivo Excel.xlsx")
library(xlsx)
dados<-read.xlsx("~/MeusProjetos/R_Study_cases/UFPE/Math. Laboratory/Importar Arquivo Excel.xlsx")
library(readxl)
dados<-read.xlsx("~/MeusProjetos/R_Study_cases/UFPE/Math. Laboratory/Importar Arquivo Excel.xlsx")
dados<-read_xlsx("~/MeusProjetos/R_Study_cases/UFPE/Math. Laboratory/Importar Arquivo Excel.xlsx")
attach(dados)
summary(dados)
plot(AA)
lines(EE)
lines(FF)
lines(EE)
lines(FF)
lines(DD, col = 2, lwd = 1)
lines(BB, col = 3, lwd = 2)
dados<-read_xlsx("~/MeusProjetos/R_Study_cases/UFPE/Math. Laboratory/Importar Arquivo Excel.xlsx")
attach(dados)
summary(dados)
plot(AA)
plot(AA)
lines(EE)
lines(FF)
lines(DD,col=2,lwd=1)
lines(BB,col=3,lwd=2)
lines(CC,col=4,lwd=3)
lines(EE,lty=2,col=4,lwd=3)
lines(FF,lty=3,col= 3,lwd=4)
plot(AA,BB)
# gráfico
abline(lm(AA ~ BB))
# gráfico da regressão linear
lm(AA ~ BB) # regressão y com x
dados
View(dados)
plot(AA)
lines(EE)
lines(FF)
lines(DD,col=2,lwd=1)
lines(BB,col=3,lwd=2)
lines(CC,col=4,lwd=3)
lines(EE,lty=2,col=4,lwd=3)
lines(FF,lty=3,col= 3,lwd=4)
plot(AA,BB)
# gráfico
abline(lm(AA ~ BB))
# gráfico da regressão linear
lm(AA ~ BB) # regressão y com x
plot(AA)
str(dados)
attach(dados)
summary(dados)
dados
plot(AA)
lines(EE)
lines(FF)
plot(AA,BB)
install.packages(c("cli", "crayon", "digest", "evaluate", "lme4", "nloptr", "parameters", "pbkrtest", "PortfolioAnalytics", "ps", "reactR", "reprex", "SparseM", "tables", "xfun", "XML", "yaml"))
plot(AA)
dados<-read_xlsx("~/MeusProjetos/R_Study_cases/UFPE/Math. Laboratory/Importar Arquivo Excel.xlsx")
str(dados)
attach(dados)
summary(dados)
dados
plot(AA)
lines(FF)
lines(DD,col=2,lwd=1)
lines(BB,col=3,lwd=2)
lines(CC,col=4,lwd=3)
lines(EE,lty=2,col=4,lwd=3)
lines(FF,lty=3,col= 3,lwd=4)
plot(AA,BB)
# gráfico
abline(lm(AA ~ BB))
# gráfico da regressão linear
lm(AA ~ BB) # regressão y com x
install.packages(c("cli", "yaml"))
install.packages(c("cli", "yaml"))
install.packages("yaml")
install.packages("yaml")
Ano<-c(1970,1975,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995)
Depositos_totais <- c(312,381.5,347.4,404.2,402.1,452.0,431.7,582.3,596.6,620.8,513.6,606.9,629.0,602.7,656.7,678.5,637.6,698.2)
PIB <- c(33027,105962,191842,212187,222354,223354,245104,273949,303496,323736,335923,362286,361909,376089,379411,384591,395478,480361)
Populacao <- c(93139037,105279615,119002706,121304828,124132901,126932107,129881714,130964997,132744121,135682832,138506432,141596301,146917459,147489931,150474909,153390844,155608189,158617875)
Renda_per_capita <- c(355,1006,1961,1749,1791,1760,1887,2092,2286,2386,2425,2559,2463,2550,2521,2507,2541,3028)
q1<-data.frame(Ano, Depositos_totais, PIB, Populacao, Renda_per_capita)
model<-lm(Depositos_totais ~ PIB+Populacao+Renda_per_capita, q1)
summary(model)
sprintf('Os resultados obtido no modelo de regressão com os dados para cada coeficiente foi intercepto: %s, beta1: %s, beta2: %s e beta3: %s.', model[[1]][1], model[[1]][2], model[[1]][3], model[[1]][4])
model[[1]][1]
##Questão 02
#parte 1
vet<-rnorm(1000, 500, 5)
vet<-sort(vet)
vet_500ma<-vet[501:1000]
vet_500me<-vet[001:500]
#Vetor diferença
v_dif<- vet_500ma-vet_500me
v_dif
#parte 2
vet_100ma<-vet[901:1000]
vet_100me<-vet[001:100]
#desvio padrão 100 maiores
sd(vet_100ma)
#desvio padrão 100 menores
sd(vet_100me)
##Questão 03
coef<-matrix(c(7,-3,-3,2,4,1,0,-2,-1),3,3, byrow = TRUE)
ys<-c(7,0,2)
solucao<-solve(coef,ys)
# Solução de X
solucao[1]
# Solução de Y
solucao[2]
# Solução de Z
solucao[3]
#determinante da matriz dos coeficientes
det(coef)
##Questão 04
fum<-c(52.4,55,55.2,55.2,55.5,56.2,57,57.4,58.3,58.4,59.2,59.3,59.6,59.7,60,60.5,60.6,61.2,61.6,61.9,62.1,62.2,62.4,62.7,63.5,64.1,64.7,64.8,64.9,65,65.4,66,66.9,69.1,69.2,69.8)
n_fum<-c(63.8,65.7,66.2,66.2,66.2,66.8,67.5,67.7,67.9,68,68.1,68.3,68.6,68.6,68.7,68.8,68.8,69.2,69.3,69.4,69.5,70.1,70.1,70.2,70.2,70.3,70.4,70.7,70.8,70.8,71,71.4,71.5,71.6,72.7,72.7,72.9,73.3,73.3,73.9,74.1,75.8,75.9,77.5)
#medias, desvios padrões e tamanho da amostra
mf<-round(mean(fum),2)
s1<-sd(fum)
mnf<-round(mean(n_fum),2)
s2<-sd(n_fum)
n1<-length(fum)
n2<-length(n_fum)
#Quantil associado a probabilidade
t1<-qt(0.975, df = n1-1)
t2<-qt(0.975, df = n2-1)
#limite inferior e superior do intervalo de confiança
mf_sup<-round((mf+t1*s1/sqrt(n1)),2)
mf_inf<-round((mf-t1*s1/sqrt(n1)),2)
mnf_sup<-round((mnf+t2*s2/sqrt(n2)),2)
mnf_inf<-round((mnf-t2*s2/sqrt(n2)),2)
#Intervalo de confiança
#fumantes
sprintf('Fumantes - Media: %s, limite inferior: %s, limite superior: %s', mf, mf_inf, mf_sup )
sprintf('Não fumantes - Media: %s, limite inferior: %s, limite superior: %s', mnf, mnf_inf, mnf_sup )
##Questão 05
#parte 1
val_p<- function (c,j) {
val<-0
n<- length(ent)
for(t in 1:n) {
val<-val+c[t]/(1+j)^t
}
return(val)
}
ent<-c(100,200,300,400,500,600)
vp_12<-val_p(ent,0.12)
sprintf('Valor presente com taxa de desconto de 0.12 a.a.: %s', round(vp_12,2))
#parte 2
val_p(ent,c(0.04,0.05,0.06))
##Questão 06
x<-5
sum<-x
for (n in 2:1000) {
# Alternar o sinal de acordo com o padrão - - + + a partir de n = 2
sign <- ifelse((n - 2) %% 4 < 2, -1, 1)
term<-(sign*(x^n)/(n*factorial(n)))
# Verificar se o termo é finito antes de adicionar à soma
if (is.finite(term)) {
sum <- sum + term
} else {
warning(paste("Termo não finito encontrado em n =", n))
break
}
}
print(sum)
#Correlation Chart
data(mtcars)
str(mtcars)
mtcars<- as.tibble(mtcars)
library(tidyverse)
library(skimr)
library(moments)
library(readxl)
mtcars<- as.tibble(mtcars)
install.packages("basedosdados")
library("basedosdados")
# Defina o seu projeto no Google Cloud
set_billing_id("<YOUR_PROJECT_ID>")
# Para carregar o dado direto no R
query <- bdplyr("br_ipea_acesso_oportunidades.estatisticas_2019")
# Para carregar o dado direto no R
query <- bdplyr("br_ipea_acesso_oportunidades.estatisticas_2019")
df <- bd_collect(query)
# Para carregar o dado direto no R
query <- bdplyr("br_ipea_acesso_oportunidades.estatisticas_2019")
df <- bd_collect(query)
# Para carregar o dado direto no R
query <- bdplyr("br_ipea_acesso_oportunidades.estatisticas_2019")
df <- bd_collect(query)
# Para carregar o dado direto no R
query <- bdplyr("br_ipea_acesso_oportunidades.estatisticas_2019")
library("basedosdados")
# Defina o seu projeto no Google Cloud
set_billing_id("<YOUR_PROJECT_ID>")
# Para carregar o dado direto no R
query <- bdplyr("br_ipea_acesso_oportunidades.estatisticas_2019")
getwd()
library(readxl)
setwd("~/MeusProjetos/R_Study_cases/UFPE/Math. Laboratory")
dados<-read_xlsx("~/MeusProjetos/R_Study_cases/UFPE/Math. Laboratory/Importar Arquivo Excel.xlsx")
attach(dados)
summary(dados)
plot(AA)
lines(EE)
lines(FF)
lines(DD, col = 2, lwd = 1)
lines(BB, col = 3, lwd = 2)
lines(CC, col = 4, lwd = 3)
set.seed(1234)
n<-10000
c1<-matrix(rnorm(n, mean = 0, sd = 0.5), ncol = 4)
c1
c2<-matrix(rnorm(n, mean = 3, sd = 2), ncol = 4)
c2
mydata<- rbind(c1, c2)
mydata
mydata<- as.data.frame(mydata)
mydata<- rbind(c1, c2)
mydata
mydata<- as.data.frame(mydata)
mydata<- rbind(c1, c2)
mydata
mydata<- as.data.frame(mydata)
names(mydata)<-c("x", "y")
mydata
with(mydata,
plot(x, y, pch =19, main= "Scatter Plot with 10000 Observations"))
with(mydata,
smoothScatter(x, y, main= "Scatter Plot Colored by Smoothed Densities"))
library(readxl)
getwd()
setwd("~/MeusProjetos/R_Study_cases/UFPE/Math. Laboratory")
dados<-read_xlsx("~/MeusProjetos/R_Study_cases/UFPE/Math. Laboratory/Importar Arquivo Excel.xlsx")
str(dados)
attach(dados)
summary(dados)
dados
plot(AA)
lines(EE)
lines(FF)
lines(DD,col=2,lwd=1)
lines(BB,col=3,lwd=2)
lines(CC,col=4,lwd=3)
lines(EE,lty=2,col=4,lwd=3)
lines(FF,lty=3,col= 3,lwd=4)
plot(AA,BB)
# gráfico
abline(lm(AA ~ BB))
# gráfico da regressão linear
ml<-lm(AA ~ BB) # regressão y com x
z<-20*ml[[1]][1]+30*ml[[1]][1]
z
install.packages("hexbin")
library(hexbin)
with(mydata,
{bin <- hexbin(x, y, xbins = 50)
plot(bin, main= "Hexagonal Binning with 10000 Observations")})
with(mydata,
{bin <- hexbin(x, y, xbins = 50)
plot(bin, main= "Hexagonal Binning with 10000 Observations")})
with(mydata,
{bin <- hexbin(x, y, xbins = 50)
plot(bin, main= "Hexagonal Binning with 10000 Observations")})
'graficos especiais  - 3'
install.packages("scatterplot3d")
library(scatterplot3d)
mtcars
data(mtcars)
attach(mtcars)
scatterplot3d(wt, disp, mpg, main= "Basic 3D Scatter Plot")
scatterplot3d(wt, disp, mpg,
pch = 16,
highlight.3d= TRUE,
type= "h",
main= "3D Scatter Plot with Vertical lines")
install.packages("ggplot2")
library(ggplot2)
mtcars %>%
ggplot(aes(x = mpg, y = gear))+
geom_point()
mtcars |>
ggplot(aes(x = mpg, y = gear))+
geom_point()
mtcars |>
ggplot(aes(x = mpg, y = gear))+
geom_point()+
labs(title = "")
g<- ggplot(mtcars)
g<- g+geom_point(aes(x = hp, y = mpg, color = factor(am)), size = 3)
g
mtcars |>
ggplot()+
geom_point(aes(x = hp, y = mpg, color = factor(am)), size = 3)+
labs(title = "")
mtcars |>
ggplot()+
geom_point(aes(x = hp, y = mpg, color = factor(am)), size = 3)+
labs(title = " Hp X Mpg")
g< g+scale_color_manual("Automatic",
values(c("red", "blue")),
labels(c("No", "Yes")))
g< g+scale_color_manual("Automatic",
values = c("red", "blue"),
labels = c("No", "Yes"))
g<- g+scale_color_manual("Automatic",
values = c("red", "blue"),
labels = c("No", "Yes"))
g
g<- g+labs(title = "Relação entre consumo, potência e tipo de câmbio",
y = "Consumo",
x = "Potência")
g
mtcars |>
ggplot()+
geom_point(aes(x = hp, y = mpg, color = factor(am)), size = 3)+
scale_color_manual("Automatic",
values = c("red", "blue"),
labels = c("No", "Yes"))+
labs(title = "Relação entre consumo, potência e tipo de câmbio",
y = "Consumo",
x = "Potência")
g
View(g)
View(g)
g1<-
?mtcars
?mtcars
g1<- ggplot(mtcars, aes(y = mpg, x = disp))+
geom_point()
g1
