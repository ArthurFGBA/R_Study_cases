opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE,
max_permutations = max_permutations)
max_sum <- 1.01
min_sum <- 0.99
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE,
max_permutations = max_permutations,
min_sum = min_sum,
max_sum = max_sum)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE,
# max_permutations = max_permutations,
min_sum = min_sum,
max_sum = max_sum)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE,
min_sum = min_sum,
max_sum = max_sum)
port_box <- add.constraint(portfolio_spec,
type = "box",
min = .05,
max = .25)
print(port_box)
print(portfolio_spec)
port_box <- add.constraint(portfolio_spec,
type = "box",
min = .10,
max = .25)
print(port_box)
pt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
port_box <- add.constraint(portifolio = portfolio_spec,
type = "box",
min = 0.10,
max = 0.25)
port_box <- add.constraint(portifolio = portfolio_spec,
type = "box",
min = 0.05,
max = 0.25)
print(port_box)
port_box <- add.constraint(portifolio = portfolio_spec,
type = "box",
min = 0.05,
max = 0.25)
print(port_box)
port_box <- add.constraint(portfolio_spec,
type = "box",
min = 0.05,
max = 0.25)
print(port_box)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
##Portfolio com pesos máximos e mínimos por ativo------------------------------
port_box <- portfolio.spec(assets = names(retorno_ativos))
print(port_box)
port_box <- add.constraint(portifolio = port_box,
type = "box",
min = 0.05,
max = 0.25)
print(port_box)
##Portfolio com pesos máximos e mínimos por ativo------------------------------
port_box <- portfolio.spec(assets = names(retorno_ativos))
View(port_box)
print(port_box)
##Portfolio com pesos máximos e mínimos por ativo------------------------------
port_box <- portfolio.spec(assets = names(retorno_ativos))
port_box <- add.constraint(portfolio = port_box,
type = "box",
min = 0.05,
max = 0.25)
print(port_box)
port_box <- add.constraint(portfolio = portfolio_spec,
type = "full_investment")
print(port_box)
##Portfolio com pesos máximos e mínimos por ativo------------------------------
port_box <- portfolio.spec(assets = names(retorno_ativos))
port_box <- add.constraint(portfolio = port_box,
type = "box",
min = 0.05,
max = 0.25)
print(port_box)
port_box <- add.constraint(portfolio = port_box,
type = "full_investment")
print(port_box)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
port_box <- add.constraint(portfolio = port_box,
type = "full_investment",
min_sum=0.99,
max_sum=1.01)
##Portfolio com pesos máximos e mínimos por ativo------------------------------
port_box <- portfolio.spec(assets = names(retorno_ativos))
port_box <- add.constraint(portfolio = port_box,
type = "box",
min = 0.05,
max = 0.25)
print(port_box)
port_box<- add.constraint(portfolio = portfolio_spec,
type = "long_only")
port_box<- add.objective(portfolio = portfolio_spec,
type = "return",
name = "mean")
port_box <- add.objective(portfolio = portfolio_spec,
type = "risk",
name = "StdDev")
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
##Portfolio com pesos máximos e mínimos por ativo------------------------------
port_box <- portfolio.spec(assets = names(retorno_ativos))
port_box <- add.constraint(portfolio = port_box,
type = "box",
min = .05,
max = .25)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
port_box <- add.constraint(portfolio = port_box,
type = "box",
min = 0.05,
max = 0.25)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
port_box <- add.constraint(portfolio = portfolio_spec,
type = "box",
min = 0.1,
max = 0.25)
print(port_box)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
port_box <- add.constraint(portfolio = portfolio_spec,
type = "box",
min = 0.1,
max = 0.25)
print(port_box)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
port_box <- add.constraint(portfolio = portfolio_spec,
type = "box",
min = 0.05,
max = 0.25)
port_box <- add.constraint(portfolio = portfolio_spec,
type = "full_investment"
)
port_box<- add.constraint(portfolio = portfolio_spec,
type = "long_only")
port_box<- add.objective(portfolio = portfolio_spec,
type = "return",
name = "mean")
port_box <- add.objective(portfolio = portfolio_spec,
type = "risk",
name = "StdDev")
print(port_box)
port_box <- add.constraint(portfolio = portfolio_spec,
type = "box",
min = 0.05,
max = 0.25)
print(port_box)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
port_box <- add.constraint(portfolio = portfolio_spec,
type = "full_investment"
)
port_box<- add.constraint(portfolio = portfolio_spec,
type = "long_only")
port_box<- add.objective(portfolio = portfolio_spec,
type = "return",
name = "mean")
port_box <- add.objective(portfolio = portfolio_spec,
type = "risk",
name = "StdDev")
print(port_box)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
print(opt_box)
port_box <- add.constraint(portfolio = portfolio_spec,
type = "box",
min = 0.15,
max = 0.25)
print(port_box)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
port_box <- add.constraint(portfolio = portfolio_spec,
type = "box",
min = 0.25,
max = 0.50)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
?PerformanceAnalytics
port_box <- add.constraint(portfolio = portfolio_spec,
type = "box",
min = 0.01,
max = 0.25)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
print(opt_box)
port_box <- add.constraint(portfolio = portfolio_spec,
type = "box",
min = 0.04,
max = 0.25)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
port_box <- add.constraint(portfolio = portfolio_spec,
type = "box",
min = .03,
max = .25)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
port_box <- add.constraint(portfolio = portfolio_spec,
type = "box",
min = .03,
max = .25)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
print(opt_box)
opt_box <- optimize.portfolio(retorno_window,
portfolio = port_box,
optimize_method = "random",
trace = TRUE)
print(opt_box)
print(port_box)
weights_box = extractWeights(opt_box)
r_sample_box = Return.portfolio(retorno_window, weights = weights_box)
r_outsample_box = Return.portfolio(window(retorno_ativos,
start= as.Date("2016-01-01")),
weights = weights_box)
r_box <- table.AnnualizedReturns(r_sample_box)
r_box_out <- table.AnnualizedReturns(r_outsample_box)
r_box_out
chart.Weights(opt_box)
print(opt_box)
port_groups <- add.constraint(portfolio = port_box,
type = "group",
groups = list(c(1, 5, 19), c(2, 4, 18), c(3),
c(6, 16), c(7), c(8), c(9, 21, 25),
c(10), c(11), c(12, 24), c(13), c(14),
c(15, 28), c(17), c(20), c(22, 23),
c(26), c(27), c(29), c(30)
),
group_min = 0.2, group_max = 0.4)
port_groups
opt_groups <- optimize.portfolio(retorno_window,
portfolio = port_groups,
optimize_method = "random",
trace = TRUE)
port_groups <- add.constraint(portfolio = port_box,
type = "group",
groups = list(c(1, 5, 19), c(2, 4, 18), c(3),
c(6, 16), c(7), c(8), c(9, 21, 25),
c(10), c(11), c(12, 24), c(13), c(14),
c(15, 28), c(17), c(20), c(22, 23),
c(26), c(27), c(29), c(30)
),
group_min = 0.2, group_max = 0.6)
port_groups
opt_groups <- optimize.portfolio(retorno_window,
portfolio = port_groups,
optimize_method = "random",
trace = TRUE)
port_groups <- add.constraint(portfolio = port_box,
type = "group",
groups = list(c(1, 5, 19), c(2, 4, 18), c(3),
c(6, 16), c(7), c(8), c(9, 21, 25),
c(10), c(11), c(12, 24), c(13), c(14),
c(15, 28), c(17), c(20), c(22, 23),
c(26), c(27), c(29), c(30)
),
group_min = 0.1, group_max = 0.4)
port_groups
opt_groups <- optimize.portfolio(retorno_window,
portfolio = port_groups,
optimize_method = "random",
trace = TRUE)
port_groups <- add.constraint(portfolio = port_box,
type = "group",
groups = list(c(1, 5, 19), c(2, 4, 18), c(3),
c(6, 16), c(7), c(8), c(9, 21, 25),
c(10), c(11), c(12, 24), c(13), c(14),
c(15, 28), c(17), c(20), c(22, 23),
c(26), c(27), c(29), c(30)
),
group_min = 0.01, group_max = 0.4)
port_groups
opt_groups <- optimize.portfolio(retorno_window,
portfolio = port_groups,
optimize_method = "random",
trace = TRUE)
port_groups <- add.constraint(portfolio = port_box,
type = "group",
groups = list(c(1, 5, 19), c(2, 4, 18), c(3),
c(6, 16), c(7), c(8), c(9, 21, 25),
c(10), c(11), c(12, 24), c(13), c(14),
c(15, 28), c(17), c(20), c(22, 23),
c(26), c(27), c(29), c(30)
),
group_min = 0.09, group_max = 0.4)
port_groups
opt_groups <- optimize.portfolio(retorno_window,
portfolio = port_groups,
optimize_method = "random",
trace = TRUE)
port_groups <- add.constraint(portfolio = port_box,
type = "group",
groups = list(c(1, 5, 19), c(2, 4, 18), c(3),
c(6, 16), c(7), c(8), c(9, 21, 25),
c(10), c(11), c(12, 24), c(13), c(14),
c(15, 28), c(17), c(20), c(22, 23),
c(26), c(27), c(29), c(30)
),
group_min = 0.06, group_max = 0.4)
port_groups
opt_groups <- optimize.portfolio(retorno_window,
portfolio = port_groups,
optimize_method = "random",
trace = TRUE)
port_groups <- add.constraint(portfolio = port_box,
type = "group",
groups = list(c(1, 5, 19), c(2, 4, 18), c(3),
c(6, 16), c(7), c(8), c(9, 21, 25),
c(10), c(11), c(12, 24), c(13), c(14),
c(15, 28), c(17), c(20), c(22, 23),
c(26), c(27), c(29), c(30)
),
group_min = 0.05, group_max = 0.4)
port_groups
opt_groups <- optimize.portfolio(retorno_window,
portfolio = port_groups,
optimize_method = "random",
trace = TRUE)
port_groups <- add.constraint(portfolio = port_box,
type = "group",
groups = list(c(1, 5, 19), c(2, 4, 18), c(3),
c(6, 16), c(7), c(8), c(9, 21, 25),
c(10), c(11), c(12, 24), c(13), c(14),
c(15, 28), c(17), c(20), c(22, 23),
c(26), c(27), c(29), c(30)
),
group_min = 0.03, group_max = 0.4)
port_groups
opt_groups <- optimize.portfolio(retorno_window,
portfolio = port_groups,
optimize_method = "random",
trace = TRUE)
print(opt_groups)
chart.Weights(opt_groups)
weights_groups = extractWeights(opt_groups)
chart.Weights(opt_groups)
r_sample_groups = Return.portfolio(retorno_window, weights = weights_groups)
r_outsample_groups = Return.portfolio(window(retorno_ativos,
start= as.Date("2016-01-01")),
weights = weights_groups)
r_groups = table.AnnualizedReturns(r_sample_groups)
r_groups_out <- table.AnnualizedReturns(r_outsample_groups)
r_out <- cbind(r_eqw_out, r_opt_out, r_box_out, r_groups_out)
colnames(r_out) <- c("pesos_iguais", "opt", "box", "group")
r_out
r <- cbind(r_eqweight, r_outsample, r_outsample_box, r_outsample_groups)
colnames(r) <- c("pesos_iguais", "opt", "box", "group")
charts.PerformanceSummary(r)
opt_rebal_base <- optimize.portfolio.rebalancing(R = retorno_ativos,
portfolio = portfolio_spec,
optimize_method = "random",
rebalance_on = "quarters",
training_period = 36,
rolling_window = 36)
# Print the results
print(opt_rebal_base)
chart.Weights(opt_rebal_base)
?chart.Weights
)
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = NULL)
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = blue)
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = blue)
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = "blue")
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = "rainbow")
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = ("blue","green"))
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = ("blue","green"))
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = ("blue")
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = ("blue"))
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = ("blue"))
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = ("blue" and "green"))
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = ("blue""green"))
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = ("green"))
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = ("violet"))
chart.Weights(opt_rebal_base, main = "Rebalanciamento", colorset = NULL)
charts.PerformanceSummary(r)
#Computar o retorno do portfolio
r_opt_rebal <- Return.portfolio(R = retorno_ativos,
weights = extractWeights(opt_rebal_base))
colnames(r_opt_rebal) <- "base"
charts.PerformanceSummary(r_opt_rebal)
charts.PerformanceSummary(r_opt_rebal, main = "Return")
charts.PerformanceSummary(r)
r_out
preco$MSFT = preco$MSFT*preco$dolar
preco$NVDA = preco$NVDA*preco$dolar
preco$INTC = preco$INTC*preco$dolar
preco$BA = preco$BA*preco$dolar
preco$IBM = preco$IBM*preco$dolar
preco$PG = preco$PG*preco$dolar
preco$AMZN = preco$AMZN*preco$dolar
preco$WBA = preco$WBA*preco$dolar
preco$UNH = preco$UNH*preco$dolar
preco$MRK = preco$MRK*preco$dolar
##Calcular a taxa de retorno -----------------------------
retorno_ativos <- Return.calculate(preco,
method = "log") %>%
na.omit()
##Plotar as séries em termos de retornos mensais ---------
xts::plot.xts(retorno_ativos[,1:4], multi.panel=TRUE, yaxis.same=FALSE)
xts::plot.xts(retorno_ativos[,5:8], multi.panel=TRUE, yaxis.same=FALSE)
xts::plot.xts(retorno_ativos[,1:4], multi.panel=TRUE, yaxis.same=FALSE)
xts::plot.xts(retorno_ativos[,5:8], multi.panel=TRUE, yaxis.same=FALSE)
xts::plot.xts(retorno_ativos[,9:12], multi.panel=TRUE, yaxis.same=FALSE)
xts::plot.xts(retorno_ativos[,12:14], multi.panel=TRUE, yaxis.same=FALSE)
xts::plot.xts(retorno_ativos[,14:17], multi.panel=TRUE, yaxis.same=FALSE)
xts::plot.xts(retorno_ativos[,18:21], multi.panel=TRUE, yaxis.same=FALSE)
xts::plot.xts(retorno_ativos[,22:25], multi.panel=TRUE, yaxis.same=FALSE)
xts::plot.xts(retorno_ativos[,26:29], multi.panel=TRUE, yaxis.same=FALSE)
xts::plot.xts(retorno_ativos[,30:33], multi.panel=TRUE, yaxis.same=FALSE)
able <- table.AnnualizedReturns(retorno_ativos, Rf = .005)
table[4,] <- kurtosis(retorno_ativos)
table[5,] <- skewness(retorno_ativos)
table <- table.AnnualizedReturns(retorno_ativos, Rf = .005)
table[4,] <- kurtosis(retorno_ativos)
table[5,] <- skewness(retorno_ativos)
chart.Histogram(retorno_ativos$BOVA11.SA, main = "Curva de Densidade - Ibovespa",
methods = c("add.density", "add.normal"), breaks=40)
chart.Histogram(retorno_ativos$imab5, main = "Curva de Densidade - Tesouro IPCA+",
methods = c("add.density", "add.normal"), breaks=40)
chart.RollingCorrelation(retorno_ativos$BOVA11.SA, retorno_ativos[,6:8],
width = 12, legend.loc = "topleft")
corrplot::corrplot(corr = cor(retorno_ativos))
# Define os nomes dos ativos na especificação
retorno_ativos <- retorno_ativos[,c(1:9,10:18,19:27,27:30)]
portfolio_spec <- portfolio.spec(assets = names(retorno_ativos))
print(portfolio_spec)
retorno_window = window(retorno_ativos, start=as.Date("2016-01-01"),
end = as.Date("2023-12-31"))
portfolio_spec <- add.constraint(portfolio = portfolio_spec,
type = "full_investment")
portfolio_spec <- add.constraint(portfolio = portfolio_spec,
type = "long_only")
print(portfolio_spec)
portfolio_spec <- add.objective(portfolio = portfolio_spec,
type = "return",
name = "mean")
portfolio_spec <- add.objective(portfolio = portfolio_spec,
type = "risk",
name = "StdDev")
opt <- optimize.portfolio(retorno_window,
portfolio = portfolio_spec,
optimize_method = "random",
trace = TRUE)
print(opt)
chart.RiskReward(opt,
risk.col = "StdDev",
return.col = "mean",
chart.assets = TRUE,
main = "Risco x Retorno - Combinações dos ativos selecionados")
weights = extractWeights(opt)
r_sample = Return.portfolio(retorno_window, weights = weights)
r_outsample = Return.portfolio(window(retorno_ativos,
start= as.Date("2016-01-01")),
weights = weights)
r_eqweight = Return.portfolio(window(retorno_ativos,
start= as.Date("2016-01-01")),
weights = rep(1/31,31))
r_opt <- table.AnnualizedReturns(r_sample)
r_opt_out = table.AnnualizedReturns(r_outsample)
r_eqw_out <- table.AnnualizedReturns(r_eqweight)
r_opt_out
chart.Weights(opt)
